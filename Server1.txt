
package main;

import com.twolattes.json.Entity;
import com.twolattes.json.EntityMarshaller;
import com.twolattes.json.Json;
import com.twolattes.json.TwoLattes;
import com.twolattes.json.Value;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Date;

public class Server{
    public static int uniqueId;
    
    public static ArrayList<ChatRoom> rooms;
    
    public static ChatRoom mainHall = new ChatRoom("mainHall");
    //public ArrayList<Connection> connection = mainHall.roomMembers;
    
    //private int port;
    private int port;

    public Server(int port){
        //connection = new ArrayList<Connection>();
        
        rooms = new ArrayList<ChatRoom>();
        
        rooms.add(mainHall);
        
        //this.port = port;
        this.port = port;
        
    }
    
    public void start(){
        try{
        ServerSocket serverSocket = new ServerSocket(port);
        System.out.println("Server is up and running... ...");
        
        while(true){
            Socket socket = serverSocket.accept();
            Connection c = new Connection(socket);
            
            mainHall.roomMembers.add(c);
            c.start();
        }
        }catch(IOException e){}
    }
    
    public void creatRoom(String name){
        ChatRoom cr = new ChatRoom(name);
        rooms.add(cr);
    }

}//public class Server extends Thread

class Connection extends Thread{

        Socket socket;

        DataInputStream sInput;
        DataOutputStream sOutput;

        //unique id for each server-client connection
        int id;
        String username;
        String date;
        
        //here room means the connections in the room.
        public ArrayList<Connection> room;
        
        Connection(Socket socket){
            
            id = ++Server.uniqueId;
            username = "guest"+id;
            
            this.socket = socket;
            
            System.out.println("Thread trying to cread Data Input/Output Streams");
            
            try{
                //create output first and then input stream
                sOutput = new DataOutputStream(socket.getOutputStream());
                sInput = new DataInputStream(socket.getInputStream());
                
                
            }catch(IOException e){}
            
           // room = Server.mainHall.roomMembers;
            
            
            int roomIndex= -1;
            for(int i=0;i<Server.rooms.size();i++){
                if(Server.rooms.get(i).name.equals("mainHall")){
                    roomIndex=i;
                    break;
                }
            }
            
            room = Server.rooms.get(roomIndex).roomMembers;
            
            date = new Date().toString() + "\n";
        }
        
        
        private boolean writeMsg(String message){
            if(!socket.isConnected()){  
                return false;
            }
            //write the message to stream
            try{
                sOutput.writeUTF(message);
            }catch(IOException e){}
            return true;
        }
        
        private synchronized void broadcast(String message,ArrayList<Connection> connection){
            for(int i = 0;i<connection.size();i++){
                Connection c = connection.get(i);
                c.writeMsg(message);
            }
        }
        
        private void changeRoom(String roomName){
            
            //find the index of the target room
            int roomIndex= -1;
            for(int i=0;i<Server.rooms.size();i++){
                if(Server.rooms.get(i).name.equals(roomName)){
                    roomIndex=i;
                    break;
                }
            }
            
            if(roomIndex == -1){System.out.println("Can not find the room.");}
            else{
                //find the index of current thread in the ChatRoom arraylist
                int connectionIndex = -1;
                for(int j=0;j<room.size();j++){
                    if(room.get(j).username.endsWith(this.username)){
                        connectionIndex = j;
                        break;
                    }
                }
                
                Server.rooms.get(roomIndex).roomMembers.add(room.get(connectionIndex));
                room.remove(connectionIndex);
                room = Server.rooms.get(roomIndex).roomMembers;
            }
        }
        
        public void run(){
            //loop until quit
            boolean keepGoing = true;
            while(keepGoing){
                try{
                    String data = sInput.readUTF();
                    
                    Json.Value v = Json.fromString(data);
                    
                    EntityMarshaller<Msg> c = TwoLattes.createEntityMarshaller(Msg.class);
                    Msg message = c.unmarshall(v);
                    
                    if((message.type).equals("message")){
                        broadcast(username + ": " + message.content,room);
                    }
                    
                }catch(IOException e){}
            }
            
        }//ending of run()
        
        
    }//ending of class Connection
@Entity
class Msg{
    @Value
    public String type;
    @Value
    public String content;
}